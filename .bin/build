#!/usr/bin/env node

var LessParser = require('less').Parser,
    compressor = require('node-minify'),
    path = require('path'),
    fs = require('fs');

var css_dir = path.join(__dirname, '..', 'public', 'css');

// make sure css directory exists
if (! fs.existsSync(css_dir)) {
  fs.mkdirSync(css_dir);
}

var source = fs.readFileSync(path.join(__dirname, '..', 'less', 'phant.less'), 'utf8');

var less_parser = new LessParser({
  paths: [path.join(__dirname, '..', 'less')]
});

less_parser.parse(source, function(err, tree) {

  if(err) {
    console.log(err);
    process.exit(1);
  }

  var css = tree.toCSS();

  fs.writeFileSync(path.join(css_dir, 'phant.css'), css, 'utf8');

  var min = tree.toCSS({
    cleancss: true
  });

  fs.writeFileSync(path.join(css_dir, 'phant.min.css'), min, 'utf8');

});

var min = new compressor.minify({
    type: 'uglifyjs',
    fileIn: [
      path.join(__dirname, '..', 'public', 'third_party', 'jquery', 'dist', 'jquery.min.js'),
      path.join(__dirname, '..', 'public', 'third_party', 'bootstrap', 'dist', 'js', 'bootstrap.min.js'),
      path.join(__dirname, '..', 'public', 'third_party', 'handlebars', 'handlebars.min.js'),
      path.join(__dirname, '..', 'public', 'js', 'src', 'stream.js')
    ],
    fileOut: path.join(__dirname, '..', 'public', 'js', 'phant-manager.min.js'),
    callback: function(err) {
      if (err) {
        console.log(err);
        process.exit(1);
      }
    }
});

var concat = new compressor.minify({
    type: 'no-compress',
    fileIn: [
      path.join(__dirname, '..', 'public', 'third_party', 'jquery', 'dist', 'jquery.js'),
      path.join(__dirname, '..', 'public', 'third_party', 'bootstrap', 'dist', 'js', 'bootstrap.js'),
      path.join(__dirname, '..', 'public', 'third_party', 'handlebars', 'handlebars.js'),
      path.join(__dirname, '..', 'public', 'js', 'src', 'stream.js')
    ],
    fileOut: path.join(__dirname, '..', 'public', 'js', 'phant-manager.js'),
    callback: function(err) {
      if (err) {
        console.log(err);
        process.exit(1);
      }
    }
});
